;; Testing 'literal'
(check-principal-type 3 int)
(check-principal-type #t bool)
(check-principal-type 'hello sym)


;; Testing 'if'
(check-principal-type (if #t 1 2) int)
(check-principal-type (if #f #t #f) bool)
(check-principal-type (if #f 'a 'b) sym)
(check-type-error (if 1 2 3))
(check-type-error (if #t #t 3))

;; Testing 'begin'
(check-principal-type (begin) unit)
(check-principal-type (begin (+ 1 2) (if #t #t #f)) bool)
(check-type-error (begin (if #f 3 #t) (if #t #t #f)))
(check-type-error (begin (let ([x 3]) (+ x 5)) (if #t (if x #t #f) x)))
(check-type-error (begin (let ([x 3]) (if x 4 5))))

;; Testing 'lambda'
(check-principal-type (lambda (x) (+ x 1)) (int -> int))
(check-principal-type (begin (lambda () (if #t 3 4))) ( -> int))
(check-principal-type (lambda (x y) (+ x y)) (int int -> int))
(check-principal-type (lambda (x y) (if x 4 y)) (bool int -> int))
(check-type (lambda (x) x) (bool -> bool))
(check-principal-type (lambda (x y) (+ x y)) (int int -> int))
(check-principal-type (lambda (x y) (+ x y)) (int int -> int))
(check-type-error (lambda (x) (cons x x)))
(check-type-error (lambda () (1)))

;; Testing 'let'
(check-principal-type (let ([x 3]) (+ x 5)) int)
(check-principal-type (let ([x 2] [y 3]) (+ x y)) int)
(check-principal-type (let ([x 2] [y 3]) (< x y)) bool)
(check-type-error (let ([x #t] [y 3]) (+ x y)))
(check-type-error (let () (if #t 1 #f)))
(check-principal-type (let ([x 2] [y 3])
                ((lambda (x y) (+ x y)) x y)) int)

;; Testing 'letstar'
(check-principal-type (let* () #t) bool)
(check-type-error (let* () (if 1 2 3)))
(check-principal-type (let* ([x 2]) (+ x 5)) int)
(check-principal-type (let* ([x 2] [y x]) (if #t x y)) int)
(check-type-error (let* ([x 2] [y x]) (if y #t #f)))
(check-type-error (begin (let* ([x 5]) (if x #t #f)) (if #t 3 4)))
(check-principal-type (let* ([x 5] [y (+ x 3)]) y) int)


;; Testing 'letrec'
(check-principal-type (letrec [(ly (lambda (y) y)) 
                     (lx (lambda (x) x))]
                     (if #t (lx 1) (ly 1)))
                     int)
(check-principal-type (letrec [(ly (lambda (y) (lx y))) 
                     (lx (lambda (x) x))]
                     (if #t (lx 1) (ly 1)))
                     int)
(check-type-error (letrec [(ly (lambda (y) (lx y))) 
                           (lx (lambda (x) x))
                           (lz (lambda (z) (if z #t #f)))
                          ]
                          (if (lz #f) (lx 1) (lz #f))))
(check-type-error (letrec [(ly (lambda (y) (if (lx y) #t #f))) 
                           (lx (lambda (x) (+ x 1)))
                          ]
                          (if #t (lx 1) (ly 1))))
(check-type-error (letrec [(ly (lambda (y) (newFunc (lambda (z) (lx z)))))
                           (lx (lambda (x) x))
                          ]
                           (if #t (lx 1) (ly 1))))
(check-type-error (letrec [(ly (lambda (y) (+ y 1))) 
                           (lx (lambda (x) (+ x 2)))]
                           (if #t lx (ly 1))))
(check-principal-type (letrec [(ly (lambda (y) (if y 1 2)))]
                    (ly #f))
                    int)
(check-principal-type (letrec [(lx (lambda (x) (if x x #t)))]
                    (lx #f))
                    bool)
(check-principal-type (letrec [(ly (lambda (y) (if (lx y) y 2)))
                    (lx (lambda (x) (if (= (+ x 1) 2) #f #t)))
                   ]
                   (ly 2))
                   int)
(check-principal-type (letrec [(ly (lambda (y) (if #t y 2)))
                   ]
                   (ly 2))
                   int)

;; Testing 'list'
(check-type '() (forall ['a] (list 'a)))
(check-principal-type '(1) (list int))
(check-principal-type '((1 2) (3 4)) (list (list int)))
(check-type-error '(1 #t))
(check-type-error '((1 #t) (3 4)))

;; Testing 'map', 'filter', 'exists?', 'foldr'
(check-principal-type filter (forall ['a] (('a -> bool) (list 'a) -> (list 'a))))
(check-principal-type map (forall ['a 'b] (('a -> 'b) (list 'a) -> (list 'b))))
(check-principal-type foldr (forall ['a 'b] (('a 'b -> 'b) 'b (list 'a) -> 'b)) )
(check-principal-type exists? (forall ['a] (('a -> bool) (list 'a) -> bool)))